// Copyright 2018 Kirill Zhuharev. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package client

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	models.proto

It has these top-level messages:
	TrainingDirection
	Group
	User
	Image
	Dialog
	Message
	Vote
	VkAuthRequest
	VkAuthReply
	UserRequest
	UserReply
	RandomRequest
	UsersReply
	VoteRequest
	VoteReply
	DialogsRequest
	DialogsReply
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sex int32

const (
	Sex_Woman Sex = 0
	Sex_Man   Sex = 1
)

var Sex_name = map[int32]string{
	0: "Woman",
	1: "Man",
}
var Sex_value = map[string]int32{
	"Woman": 0,
	"Man":   1,
}

func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Faculty int32

const (
	Faculty_faculty_none Faculty = 0
	Faculty_FMF          Faculty = 1
	Faculty_EGF          Faculty = 2
	Faculty_FIP          Faculty = 3
	Faculty_FF           Faculty = 4
	Faculty_HGF          Faculty = 5
	Faculty_FU           Faculty = 6
)

var Faculty_name = map[int32]string{
	0: "faculty_none",
	1: "FMF",
	2: "EGF",
	3: "FIP",
	4: "FF",
	5: "HGF",
	6: "FU",
}
var Faculty_value = map[string]int32{
	"faculty_none": 0,
	"FMF":          1,
	"EGF":          2,
	"FIP":          3,
	"FF":           4,
	"HGF":          5,
	"FU":           6,
}

func (x Faculty) String() string {
	return proto.EnumName(Faculty_name, int32(x))
}
func (Faculty) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VoteType int32

const (
	VoteType_vote_none VoteType = 0
	VoteType_dislike   VoteType = 1
	VoteType_like      VoteType = 2
)

var VoteType_name = map[int32]string{
	0: "vote_none",
	1: "dislike",
	2: "like",
}
var VoteType_value = map[string]int32{
	"vote_none": 0,
	"dislike":   1,
	"like":      2,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}
func (VoteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ObjectType int32

const (
	ObjectType_ObjectNone    ObjectType = 0
	ObjectType_ObjectUser    ObjectType = 1
	ObjectType_ObjectVote    ObjectType = 2
	ObjectType_ObjectMessage ObjectType = 3
)

var ObjectType_name = map[int32]string{
	0: "ObjectNone",
	1: "ObjectUser",
	2: "ObjectVote",
	3: "ObjectMessage",
}
var ObjectType_value = map[string]int32{
	"ObjectNone":    0,
	"ObjectUser":    1,
	"ObjectVote":    2,
	"ObjectMessage": 3,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}
func (ObjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ErrorCode int32

const (
	ErrorCode_ErrorNone ErrorCode = 0
	ErrorCode_NotFound  ErrorCode = 1
)

var ErrorCode_name = map[int32]string{
	0: "ErrorNone",
	1: "NotFound",
}
var ErrorCode_value = map[string]int32{
	"ErrorNone": 0,
	"NotFound":  1,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TrainingDirection struct {
	Id                int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title             string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ShortNameTemplate string `protobuf:"bytes,3,opt,name=short_name_template,json=shortNameTemplate" json:"short_name_template,omitempty"`
}

func (m *TrainingDirection) Reset()                    { *m = TrainingDirection{} }
func (m *TrainingDirection) String() string            { return proto.CompactTextString(m) }
func (*TrainingDirection) ProtoMessage()               {}
func (*TrainingDirection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TrainingDirection) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrainingDirection) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TrainingDirection) GetShortNameTemplate() string {
	if m != nil {
		return m.ShortNameTemplate
	}
	return ""
}

type Group struct {
	Id                int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Faculty           Faculty `protobuf:"varint,2,opt,name=faculty,enum=models.Faculty" json:"faculty,omitempty"`
	StartYear         int64   `protobuf:"varint,3,opt,name=start_year,json=startYear" json:"start_year,omitempty"`
	TrainingDirection int64   `protobuf:"varint,4,opt,name=training_direction,json=trainingDirection" json:"training_direction,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Group) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetFaculty() Faculty {
	if m != nil {
		return m.Faculty
	}
	return Faculty_faculty_none
}

func (m *Group) GetStartYear() int64 {
	if m != nil {
		return m.StartYear
	}
	return 0
}

func (m *Group) GetTrainingDirection() int64 {
	if m != nil {
		return m.TrainingDirection
	}
	return 0
}

type User struct {
	Id              int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName       string   `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName        string   `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Sex             Sex      `protobuf:"varint,4,opt,name=sex,enum=models.Sex" json:"sex,omitempty"`
	GroupId         int64    `protobuf:"varint,5,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Images          []*Image `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	MessagesFromAll bool     `protobuf:"varint,7,opt,name=messages_from_all,json=messagesFromAll" json:"messages_from_all,omitempty"`
	Bio             string   `protobuf:"bytes,8,opt,name=bio" json:"bio,omitempty"`
	Rating          int64    `protobuf:"varint,9,opt,name=rating" json:"rating,omitempty"`
	Age             int64    `protobuf:"varint,10,opt,name=age" json:"age,omitempty"`
	VkId            int64    `protobuf:"varint,11,opt,name=vk_id,json=vkId" json:"vk_id,omitempty"`
	// @inject_tag: xorm:"jsonb notnull default '{}'::jsonb 'created_at'"
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt" json:"created_at,omitempty" xorm:"jsonb notnull default '{}'::jsonb 'created_at'"`
	AvatarUrl string                      `protobuf:"bytes,13,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

func (m *User) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *User) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *User) GetMessagesFromAll() bool {
	if m != nil {
		return m.MessagesFromAll
	}
	return false
}

func (m *User) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *User) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *User) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetVkId() int64 {
	if m != nil {
		return m.VkId
	}
	return 0
}

func (m *User) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

type Image struct {
	Url         string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Color       string  `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	Hash        string  `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
	HashVersion int64   `protobuf:"varint,4,opt,name=hash_version,json=hashVersion" json:"hash_version,omitempty"`
	Ratio       float32 `protobuf:"fixed32,5,opt,name=ratio" json:"ratio,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Image) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Image) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Image) GetHashVersion() int64 {
	if m != nil {
		return m.HashVersion
	}
	return 0
}

func (m *Image) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type Dialog struct {
	ParcipantId int64    `protobuf:"varint,1,opt,name=parcipant_id,json=parcipantId" json:"parcipant_id,omitempty"`
	LastMessage *Message `protobuf:"bytes,2,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	Readed      bool     `protobuf:"varint,3,opt,name=readed" json:"readed,omitempty"`
}

func (m *Dialog) Reset()                    { *m = Dialog{} }
func (m *Dialog) String() string            { return proto.CompactTextString(m) }
func (*Dialog) ProtoMessage()               {}
func (*Dialog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Dialog) GetParcipantId() int64 {
	if m != nil {
		return m.ParcipantId
	}
	return 0
}

func (m *Dialog) GetLastMessage() *Message {
	if m != nil {
		return m.LastMessage
	}
	return nil
}

func (m *Dialog) GetReaded() bool {
	if m != nil {
		return m.Readed
	}
	return false
}

type Message struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DialogId string `protobuf:"bytes,2,opt,name=dialog_id,json=dialogId" json:"dialog_id,omitempty"`
	Text     string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	SenderId int64  `protobuf:"varint,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	// @inject_tag: xorm:"jsonb notnull default '{}'::jsonb 'created_at'"
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty" xorm:"jsonb notnull default '{}'::jsonb 'created_at'"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Message) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetDialogId() string {
	if m != nil {
		return m.DialogId
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Message) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Vote struct {
	// @inject_tag: storm:"index"
	TargetUserId int64 `protobuf:"varint,1,opt,name=target_user_id,json=targetUserId" json:"target_user_id,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	VoteType VoteType `protobuf:"varint,2,opt,name=vote_type,json=voteType,enum=models.VoteType" json:"vote_type,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	VoterId int64 `protobuf:"varint,3,opt,name=voter_id,json=voterId" json:"voter_id,omitempty" storm:"index"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Vote) GetTargetUserId() int64 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

func (m *Vote) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_vote_none
}

func (m *Vote) GetVoterId() int64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

type VkAuthRequest struct {
	VkToken string `protobuf:"bytes,1,opt,name=vk_token,json=vkToken" json:"vk_token,omitempty"`
}

func (m *VkAuthRequest) Reset()                    { *m = VkAuthRequest{} }
func (m *VkAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*VkAuthRequest) ProtoMessage()               {}
func (*VkAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VkAuthRequest) GetVkToken() string {
	if m != nil {
		return m.VkToken
	}
	return ""
}

type VkAuthReply struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *VkAuthReply) Reset()                    { *m = VkAuthReply{} }
func (m *VkAuthReply) String() string            { return proto.CompactTextString(m) }
func (*VkAuthReply) ProtoMessage()               {}
func (*VkAuthReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VkAuthReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *VkAuthReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserReply struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RandomRequest struct {
	MinAge int64 `protobuf:"varint,1,opt,name=min_age,json=minAge" json:"min_age,omitempty"`
	MaxAge int64 `protobuf:"varint,2,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	Sex    Sex   `protobuf:"varint,3,opt,name=sex,enum=models.Sex" json:"sex,omitempty"`
	// @inject_tag: validate:"required"
	Token string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty" validate:"required"`
}

func (m *RandomRequest) Reset()                    { *m = RandomRequest{} }
func (m *RandomRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomRequest) ProtoMessage()               {}
func (*RandomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RandomRequest) GetMinAge() int64 {
	if m != nil {
		return m.MinAge
	}
	return 0
}

func (m *RandomRequest) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *RandomRequest) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_Woman
}

func (m *RandomRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UsersReply struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersReply) Reset()                    { *m = UsersReply{} }
func (m *UsersReply) String() string            { return proto.CompactTextString(m) }
func (*UsersReply) ProtoMessage()               {}
func (*UsersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UsersReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type VoteRequest struct {
	UserId   int64    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Token    string   `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	VoteType VoteType `protobuf:"varint,3,opt,name=vote_type,json=voteType,enum=models.VoteType" json:"vote_type,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VoteRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VoteRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VoteRequest) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return VoteType_vote_none
}

type VoteReply struct {
	Matched bool `protobuf:"varint,1,opt,name=matched" json:"matched,omitempty"`
}

func (m *VoteReply) Reset()                    { *m = VoteReply{} }
func (m *VoteReply) String() string            { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()               {}
func (*VoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *VoteReply) GetMatched() bool {
	if m != nil {
		return m.Matched
	}
	return false
}

type DialogsRequest struct {
	Token  string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit  int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *DialogsRequest) Reset()                    { *m = DialogsRequest{} }
func (m *DialogsRequest) String() string            { return proto.CompactTextString(m) }
func (*DialogsRequest) ProtoMessage()               {}
func (*DialogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DialogsRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DialogsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DialogsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type DialogsReply struct {
	Dialogs []*Dialog `protobuf:"bytes,1,rep,name=dialogs" json:"dialogs,omitempty"`
}

func (m *DialogsReply) Reset()                    { *m = DialogsReply{} }
func (m *DialogsReply) String() string            { return proto.CompactTextString(m) }
func (*DialogsReply) ProtoMessage()               {}
func (*DialogsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DialogsReply) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func init() {
	proto.RegisterType((*TrainingDirection)(nil), "models.TrainingDirection")
	proto.RegisterType((*Group)(nil), "models.Group")
	proto.RegisterType((*User)(nil), "models.User")
	proto.RegisterType((*Image)(nil), "models.Image")
	proto.RegisterType((*Dialog)(nil), "models.Dialog")
	proto.RegisterType((*Message)(nil), "models.Message")
	proto.RegisterType((*Vote)(nil), "models.Vote")
	proto.RegisterType((*VkAuthRequest)(nil), "models.VkAuthRequest")
	proto.RegisterType((*VkAuthReply)(nil), "models.VkAuthReply")
	proto.RegisterType((*UserRequest)(nil), "models.UserRequest")
	proto.RegisterType((*UserReply)(nil), "models.UserReply")
	proto.RegisterType((*RandomRequest)(nil), "models.RandomRequest")
	proto.RegisterType((*UsersReply)(nil), "models.UsersReply")
	proto.RegisterType((*VoteRequest)(nil), "models.VoteRequest")
	proto.RegisterType((*VoteReply)(nil), "models.VoteReply")
	proto.RegisterType((*DialogsRequest)(nil), "models.DialogsRequest")
	proto.RegisterType((*DialogsReply)(nil), "models.DialogsReply")
	proto.RegisterEnum("models.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("models.Faculty", Faculty_name, Faculty_value)
	proto.RegisterEnum("models.VoteType", VoteType_name, VoteType_value)
	proto.RegisterEnum("models.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("models.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Love service

type LoveClient interface {
	// Авторизация
	VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error)
	// GetUser возвращает информацию о пользователе по его ID
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	// RandomUsers возвращает рандомные профили, которые ещё не лайкал текущий
	// юзер
	RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error)
	// Vote vote for user
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	// Vote vote for user
	GetDialogs(ctx context.Context, in *DialogsRequest, opts ...grpc.CallOption) (*DialogsReply, error)
}

type loveClient struct {
	cc *grpc.ClientConn
}

func NewLoveClient(cc *grpc.ClientConn) LoveClient {
	return &loveClient{cc}
}

func (c *loveClient) VkAuth(ctx context.Context, in *VkAuthRequest, opts ...grpc.CallOption) (*VkAuthReply, error) {
	out := new(VkAuthReply)
	err := grpc.Invoke(ctx, "/models.Love/VkAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/models.Love/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) RandomUsers(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*UsersReply, error) {
	out := new(UsersReply)
	err := grpc.Invoke(ctx, "/models.Love/RandomUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/models.Love/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loveClient) GetDialogs(ctx context.Context, in *DialogsRequest, opts ...grpc.CallOption) (*DialogsReply, error) {
	out := new(DialogsReply)
	err := grpc.Invoke(ctx, "/models.Love/GetDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Love service

type LoveServer interface {
	// Авторизация
	VkAuth(context.Context, *VkAuthRequest) (*VkAuthReply, error)
	// GetUser возвращает информацию о пользователе по его ID
	GetUser(context.Context, *UserRequest) (*User, error)
	// RandomUsers возвращает рандомные профили, которые ещё не лайкал текущий
	// юзер
	RandomUsers(context.Context, *RandomRequest) (*UsersReply, error)
	// Vote vote for user
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
	// Vote vote for user
	GetDialogs(context.Context, *DialogsRequest) (*DialogsReply, error)
}

func RegisterLoveServer(s *grpc.Server, srv LoveServer) {
	s.RegisterService(&_Love_serviceDesc, srv)
}

func _Love_VkAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VkAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).VkAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/VkAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).VkAuth(ctx, req.(*VkAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_RandomUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).RandomUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/RandomUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).RandomUsers(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Love_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoveServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Love/GetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoveServer).GetDialogs(ctx, req.(*DialogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Love_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Love",
	HandlerType: (*LoveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VkAuth",
			Handler:    _Love_VkAuth_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Love_GetUser_Handler,
		},
		{
			MethodName: "RandomUsers",
			Handler:    _Love_RandomUsers_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Love_Vote_Handler,
		},
		{
			MethodName: "GetDialogs",
			Handler:    _Love_GetDialogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}

func init() { proto.RegisterFile("models.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x72, 0xdb, 0xc4,
	0x17, 0xff, 0xcb, 0xf2, 0xe7, 0x91, 0x93, 0xca, 0x9b, 0xfe, 0x5b, 0x35, 0x6d, 0x69, 0xd0, 0xb4,
	0x8c, 0xf1, 0x4c, 0x93, 0x62, 0x6e, 0xe0, 0x32, 0x43, 0xeb, 0xe0, 0x19, 0xd2, 0x32, 0xaa, 0x5b,
	0xa6, 0x57, 0x9a, 0x8d, 0xb5, 0x76, 0x84, 0x25, 0xad, 0x59, 0xad, 0x45, 0x32, 0xc0, 0x0d, 0x97,
	0x5c, 0x31, 0xc3, 0x1b, 0x70, 0xc9, 0xeb, 0xf0, 0x0a, 0x3c, 0x08, 0x73, 0xf6, 0xc3, 0xb1, 0x1b,
	0x3a, 0x85, 0x2b, 0xef, 0xf9, 0x9d, 0xb3, 0xe7, 0xfc, 0xce, 0xd7, 0xca, 0xd0, 0xcd, 0x79, 0xc2,
	0xb2, 0xf2, 0x70, 0x29, 0xb8, 0xe4, 0xa4, 0xa9, 0xa5, 0xfd, 0x7b, 0x73, 0xce, 0xe7, 0x19, 0x3b,
	0xa2, 0xcb, 0xf4, 0x88, 0x16, 0x05, 0x97, 0x54, 0xa6, 0xbc, 0x30, 0x56, 0xfb, 0x0f, 0x8c, 0x56,
	0x49, 0x67, 0xab, 0xd9, 0x91, 0x4c, 0x73, 0x56, 0x4a, 0x9a, 0x2f, 0xb5, 0x41, 0x98, 0x42, 0x6f,
	0x22, 0x68, 0x5a, 0xa4, 0xc5, 0xfc, 0x69, 0x2a, 0xd8, 0x14, 0x2f, 0x93, 0x5d, 0xa8, 0xa5, 0x49,
	0xe0, 0x1c, 0x38, 0x7d, 0x37, 0xaa, 0xa5, 0x09, 0xb9, 0x09, 0x0d, 0x99, 0xca, 0x8c, 0x05, 0xb5,
	0x03, 0xa7, 0xdf, 0x89, 0xb4, 0x40, 0x0e, 0x61, 0xaf, 0x3c, 0xe7, 0x42, 0xc6, 0x05, 0xcd, 0x59,
	0x2c, 0x59, 0xbe, 0xcc, 0xa8, 0x64, 0x81, 0xab, 0x6c, 0x7a, 0x4a, 0xf5, 0x9c, 0xe6, 0x6c, 0x62,
	0x14, 0xe1, 0xaf, 0x0e, 0x34, 0x4e, 0x04, 0x5f, 0x2d, 0xaf, 0xf9, 0xff, 0x18, 0x5a, 0x33, 0x3a,
	0x5d, 0x65, 0xf2, 0x52, 0x45, 0xd8, 0x1d, 0xde, 0x38, 0x34, 0xb9, 0x8e, 0x34, 0x1c, 0x59, 0x3d,
	0xb9, 0x0f, 0x50, 0x4a, 0x2a, 0x64, 0x7c, 0xc9, 0xa8, 0x50, 0xb1, 0xdc, 0xa8, 0xa3, 0x90, 0x37,
	0x8c, 0x0a, 0xf2, 0x18, 0x88, 0x34, 0xe9, 0xc4, 0x89, 0xcd, 0x27, 0xa8, 0x2b, 0xb3, 0x9e, 0x7c,
	0x3b, 0xd1, 0xf0, 0x17, 0x17, 0xea, 0xaf, 0x4a, 0x26, 0xae, 0x31, 0xba, 0x0f, 0x30, 0x4b, 0x45,
	0xa9, 0x73, 0x33, 0x69, 0x77, 0x14, 0x82, 0x29, 0x91, 0xbb, 0xd0, 0xc9, 0xa8, 0xd5, 0xea, 0x84,
	0xdb, 0x08, 0x28, 0xe5, 0x7d, 0x70, 0x4b, 0x76, 0xa1, 0x82, 0xee, 0x0e, 0x3d, 0x9b, 0xc9, 0x4b,
	0x76, 0x11, 0x21, 0x4e, 0xee, 0x40, 0x7b, 0x8e, 0x55, 0x88, 0xd3, 0x24, 0x68, 0xa8, 0x80, 0x2d,
	0x25, 0x8f, 0x13, 0xf2, 0x08, 0x9a, 0x69, 0x4e, 0xe7, 0xac, 0x0c, 0x9a, 0x07, 0x6e, 0xdf, 0x1b,
	0xee, 0xd8, 0xcb, 0x63, 0x44, 0x23, 0xa3, 0x24, 0x03, 0xe8, 0xe5, 0xac, 0x2c, 0xf1, 0x1c, 0xcf,
	0x04, 0xcf, 0x63, 0x9a, 0x65, 0x41, 0xeb, 0xc0, 0xe9, 0xb7, 0xa3, 0x1b, 0x56, 0x31, 0x12, 0x3c,
	0x3f, 0xce, 0x32, 0xe2, 0x83, 0x7b, 0x96, 0xf2, 0xa0, 0xad, 0x38, 0xe2, 0x91, 0xdc, 0x82, 0xa6,
	0xa0, 0x32, 0x2d, 0xe6, 0x41, 0x47, 0x45, 0x37, 0x12, 0x5a, 0xd2, 0x39, 0x0b, 0x40, 0x81, 0x78,
	0x24, 0x7b, 0xd0, 0xa8, 0x16, 0x48, 0xd3, 0x53, 0x58, 0xbd, 0x5a, 0x8c, 0x13, 0xf2, 0x39, 0xc0,
	0x54, 0x30, 0x2a, 0x59, 0x12, 0x53, 0x19, 0x74, 0x0f, 0x9c, 0xbe, 0x37, 0xdc, 0x3f, 0xd4, 0x63,
	0x76, 0x68, 0xc7, 0xec, 0x70, 0x62, 0xc7, 0x2c, 0xea, 0x18, 0xeb, 0x63, 0x89, 0x45, 0xa5, 0x15,
	0x95, 0x54, 0xc4, 0x2b, 0x91, 0x05, 0x3b, 0xba, 0xa8, 0x1a, 0x79, 0x25, 0xb2, 0xf0, 0x47, 0x68,
	0xa8, 0x3c, 0x91, 0x09, 0x1a, 0x38, 0x9a, 0xf3, 0x4a, 0x64, 0x38, 0x80, 0x53, 0x9e, 0x71, 0x61,
	0x07, 0x50, 0x09, 0x84, 0x40, 0xfd, 0x9c, 0x96, 0xe7, 0xa6, 0x01, 0xea, 0x4c, 0x3e, 0x84, 0x2e,
	0xfe, 0xc6, 0x15, 0x13, 0xe5, 0x55, 0xeb, 0x3d, 0xc4, 0x5e, 0x6b, 0x08, 0x9d, 0x61, 0xca, 0x5c,
	0x55, 0xbf, 0x16, 0x69, 0x21, 0xfc, 0x1e, 0x9a, 0x4f, 0x53, 0x9a, 0xf1, 0x39, 0xba, 0x58, 0x52,
	0x31, 0x4d, 0x97, 0xb4, 0x90, 0xf1, 0x7a, 0x2a, 0xbc, 0x35, 0x36, 0x4e, 0xc8, 0x10, 0xba, 0xaa,
	0xff, 0xa6, 0xda, 0x8a, 0x96, 0x77, 0x35, 0xb5, 0xa7, 0x1a, 0x8e, 0x3c, 0x34, 0x32, 0x82, 0xaa,
	0x3b, 0xa3, 0x09, 0x4b, 0x14, 0xdf, 0x76, 0x64, 0xa4, 0xf0, 0x77, 0x07, 0x5a, 0xd6, 0xe6, 0xed,
	0x31, 0xbc, 0x0b, 0x9d, 0x44, 0x91, 0x42, 0x1e, 0x3a, 0xf7, 0xb6, 0x06, 0xc6, 0x09, 0xa6, 0x2f,
	0xd9, 0x85, 0xb4, 0xe9, 0xe3, 0x19, 0x2f, 0x94, 0xac, 0x48, 0x98, 0xc0, 0x0b, 0x3a, 0xf7, 0xb6,
	0x06, 0xae, 0xb5, 0xae, 0xf1, 0x1f, 0x5a, 0x17, 0x56, 0x50, 0x7f, 0xcd, 0x25, 0x23, 0x0f, 0x61,
	0x57, 0x52, 0x31, 0x67, 0x32, 0x5e, 0x95, 0x3a, 0x88, 0x26, 0xdb, 0xd5, 0x28, 0xee, 0xd2, 0x38,
	0x21, 0x8f, 0xa1, 0x53, 0x71, 0xc9, 0x62, 0x79, 0xb9, 0x64, 0x66, 0xa3, 0x7d, 0x5b, 0x1b, 0x74,
	0x33, 0xb9, 0x5c, 0xb2, 0xa8, 0x5d, 0x99, 0x13, 0x6e, 0x04, 0x9e, 0x95, 0x3b, 0xbd, 0xd1, 0x2d,
	0x25, 0x8f, 0x93, 0x70, 0x00, 0x3b, 0xaf, 0x17, 0xc7, 0x2b, 0x79, 0x1e, 0xb1, 0xef, 0x56, 0xac,
	0x94, 0xca, 0x76, 0x11, 0x4b, 0xbe, 0x60, 0x85, 0x19, 0x90, 0x56, 0xb5, 0x98, 0xa0, 0x18, 0x3e,
	0x03, 0xcf, 0xda, 0x2e, 0xb3, 0x4b, 0x72, 0x00, 0x75, 0xe4, 0xa8, 0xac, 0xbc, 0x61, 0xd7, 0xc6,
	0x47, 0x8a, 0x91, 0xd2, 0xa8, 0x67, 0x4d, 0x39, 0x72, 0xcd, 0xb3, 0xa6, 0xdc, 0x7c, 0x04, 0x9e,
	0xb2, 0x31, 0x01, 0x6f, 0x43, 0x6b, 0x3b, 0xd5, 0xe6, 0x4a, 0x25, 0x19, 0x3e, 0x86, 0x8e, 0xb6,
	0xfb, 0x57, 0xc1, 0xc2, 0x0a, 0x76, 0x22, 0x5a, 0x24, 0x3c, 0xdf, 0x70, 0x9c, 0xa7, 0x45, 0x8c,
	0x17, 0xa8, 0x30, 0x0f, 0x8b, 0xfb, 0x8e, 0x87, 0x65, 0x9d, 0x4e, 0x7d, 0x33, 0x9d, 0x27, 0x00,
	0xc8, 0xa2, 0xd4, 0x3c, 0x43, 0x68, 0x20, 0x9b, 0x32, 0x70, 0xd4, 0x03, 0xb3, 0x4d, 0x54, 0xab,
	0xe3, 0x63, 0x1c, 0xe7, 0x69, 0x71, 0x3c, 0x67, 0x4a, 0x41, 0x2f, 0x62, 0x3b, 0x57, 0xa8, 0xa0,
	0xdf, 0x82, 0x26, 0x9f, 0xcd, 0x4a, 0x26, 0x6d, 0xe9, 0xb4, 0x84, 0xd6, 0x59, 0x9a, 0xa7, 0xd2,
	0xc2, 0x05, 0x78, 0xd8, 0xa4, 0xf7, 0x15, 0xe0, 0x2a, 0x5e, 0x6d, 0x23, 0xde, 0x76, 0xef, 0xdd,
	0xf7, 0xf5, 0x3e, 0x7c, 0x04, 0x1d, 0x1d, 0x0c, 0xd9, 0x05, 0x98, 0xb9, 0x9c, 0x9e, 0x33, 0x1d,
	0xaa, 0x1d, 0x59, 0x31, 0x9c, 0xc0, 0xae, 0xde, 0xce, 0xd2, 0xd2, 0x5a, 0x47, 0x77, 0x36, 0xa3,
	0xcc, 0x97, 0x16, 0xc2, 0xcf, 0xa0, 0xbb, 0xf6, 0x8a, 0xf1, 0xfb, 0xd0, 0xd2, 0xdb, 0x65, 0xeb,
	0xb3, 0x6b, 0x99, 0x6b, 0xb3, 0xc8, 0xaa, 0x07, 0x77, 0xc0, 0x7d, 0xc9, 0x2e, 0x48, 0x07, 0x1a,
	0xdf, 0xf0, 0x9c, 0x16, 0xfe, 0xff, 0x48, 0x0b, 0xdc, 0x53, 0x5a, 0xf8, 0xce, 0xe0, 0x05, 0xb4,
	0xcc, 0x57, 0x8b, 0xf8, 0xd0, 0x35, 0xdf, 0xad, 0xb8, 0xe0, 0x05, 0xd3, 0x56, 0xa3, 0xd3, 0x91,
	0xef, 0xe0, 0xe1, 0xd9, 0xc9, 0xc8, 0xaf, 0x29, 0x64, 0xfc, 0xb5, 0xef, 0x92, 0x26, 0xd4, 0x46,
	0x23, 0xbf, 0x8e, 0xc0, 0x97, 0x27, 0x23, 0xbf, 0xa1, 0x80, 0x57, 0x7e, 0x73, 0xf0, 0x04, 0xda,
	0xb6, 0x70, 0x64, 0xc7, 0x54, 0xd7, 0xb8, 0xf3, 0x90, 0x70, 0x99, 0xa5, 0x0b, 0xe6, 0x3b, 0xa4,
	0x0d, 0x75, 0x75, 0xaa, 0x0d, 0x5e, 0x00, 0xbc, 0x38, 0xfb, 0x96, 0x4d, 0xa5, 0xba, 0xb3, 0x6b,
	0xa5, 0xe7, 0xfa, 0xd2, 0x5a, 0xc6, 0xa6, 0xfb, 0xce, 0x95, 0x8c, 0x51, 0xfc, 0x1a, 0xe9, 0xc1,
	0x8e, 0x96, 0xcd, 0xab, 0xe4, 0xbb, 0x83, 0x3e, 0x74, 0x9e, 0x09, 0xc1, 0xc5, 0x17, 0x3c, 0x51,
	0x1c, 0x94, 0x60, 0xdc, 0x75, 0xa1, 0xfd, 0x9c, 0xcb, 0x11, 0x5f, 0x15, 0x89, 0xef, 0x0c, 0xff,
	0x70, 0xa1, 0xfe, 0x15, 0xaf, 0x18, 0x39, 0x85, 0xa6, 0xde, 0x46, 0xf2, 0xff, 0x75, 0xfb, 0x37,
	0x37, 0x79, 0x7f, 0xef, 0x6d, 0x78, 0x99, 0x5d, 0x86, 0xb7, 0x7f, 0xfe, 0xf3, 0xaf, 0xdf, 0x6a,
	0x3d, 0x72, 0x43, 0xfd, 0x9f, 0xa9, 0x3e, 0x39, 0xa2, 0x2b, 0x79, 0x7e, 0x54, 0x2d, 0xc8, 0x29,
	0xb4, 0x4e, 0xf4, 0xfb, 0x42, 0xf6, 0xb6, 0x86, 0xd6, 0x78, 0xdb, 0x9a, 0xe4, 0xf0, 0x81, 0x72,
	0x73, 0x87, 0xdc, 0xb6, 0x6e, 0xd4, 0x64, 0x1f, 0xfd, 0x60, 0x06, 0xf9, 0x27, 0xf2, 0x06, 0x3c,
	0xbd, 0x8d, 0x6a, 0x37, 0xae, 0x28, 0x6e, 0xad, 0xe8, 0x3e, 0xd9, 0x74, 0xaa, 0x67, 0xe4, 0xba,
	0xeb, 0x8a, 0xe3, 0xe7, 0x13, 0xff, 0x61, 0xcd, 0xd2, 0x8c, 0x95, 0x64, 0x62, 0x9e, 0xca, 0xbd,
	0xcd, 0xa9, 0xb7, 0x1e, 0x7b, 0xdb, 0x20, 0x3a, 0x7c, 0xa8, 0x1c, 0x7e, 0x40, 0xee, 0xbd, 0x83,
	0x2b, 0x06, 0x60, 0xe4, 0x25, 0xc0, 0x09, 0x93, 0x66, 0x5a, 0xc9, 0xad, 0xed, 0xb9, 0xb4, 0x4b,
	0xb1, 0x7f, 0xf3, 0x1a, 0xfe, 0x8f, 0x45, 0x35, 0x53, 0x7c, 0xd6, 0x54, 0x8f, 0xfe, 0xa7, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xb4, 0x44, 0x31, 0x5a, 0x0a, 0x00, 0x00,
}
